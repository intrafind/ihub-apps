# docker-compose.prod.yml - Production Environment
version: '3.8'

services:
  # Configuration Initialization Container
  ihub-config-init:
    image: alpine:latest
    container_name: ihub-config-init
    volumes:
      # Source configuration files
      - ../contents/config:/source-config:ro
      - ../contents/apps:/source-apps:ro
      - ../contents/models:/source-models:ro
      - ../contents/locales:/source-locales:ro
      - ../contents/prompts:/source-prompts:ro

      # Destination volumes
      - ihub-config:/dest-config
      - ihub-apps:/dest-apps
      - ihub-models:/dest-models
      - ihub-locales:/dest-locales
      - ihub-prompts:/dest-prompts
    command: >
      sh -c "
        echo 'Initializing configuration volumes...'
        
        # Copy configuration files if destination is empty
        if [ ! -f /dest-config/platform.json ]; then
          echo 'Copying config files...'
          cp -r /source-config/* /dest-config/ 2>/dev/null || true
        fi
        
        if [ ! -f /dest-apps/chat.json ]; then
          echo 'Copying app files...'
          cp -r /source-apps/* /dest-apps/ 2>/dev/null || true
        fi
        
        if [ ! -f /dest-models/gpt-4.json ]; then
          echo 'Copying model files...'
          cp -r /source-models/* /dest-models/ 2>/dev/null || true
        fi
        
        if [ ! -d /dest-locales/en ]; then
          echo 'Copying locale files...'
          cp -r /source-locales/* /dest-locales/ 2>/dev/null || true
        fi
        
        if [ ! -f /dest-prompts/summarize.json ]; then
          echo 'Copying prompt files...'
          cp -r /source-prompts/* /dest-prompts/ 2>/dev/null || true
        fi
        
        echo 'Configuration initialization completed'
      "
    restart: 'no'
    # network_mode: host
    networks:
      - ihub-network

  # Main iHub Apps Production Container
  ihub-app:
    image: ${AI_HUB_IMAGE:-ihub-apps:latest}
    container_name: ihub-app
    ports:
      - '${AI_HUB_PORT:-3000}:3000'
    volumes:
      # Configuration volumes (read-only for security)
      - ihub-config:/app/contents/config:ro
      - ihub-apps:/app/contents/apps:ro
      - ihub-models:/app/contents/models:ro
      - ihub-locales:/app/contents/locales:ro
      - ihub-prompts:/app/contents/prompts:ro

      # Content that may be updated via admin interface
      - ihub-pages:/app/contents/pages:rw
      - ihub-sources:/app/contents/sources:rw

      # Persistent data volumes
      - ihub-data:/app/contents/data:rw
      - ihub-uploads:/app/contents/uploads:rw
      - ihub-logs:/app/logs:rw
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WORKERS=${WORKERS:-4}
      - PORT=3000
      - HOST=0.0.0.0
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
    env_file:
      - .env.production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - ihub-network
    # network_mode: host
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    depends_on:
      ihub-config-init:
        condition: service_completed_successfully

volumes:
  # Configuration volumes (semi-static)
  ihub-config:
    driver: local
  ihub-apps:
    driver: local
  ihub-models:
    driver: local
  ihub-locales:
    driver: local
  ihub-prompts:
    driver: local

  # Content volumes (editable via admin)
  ihub-pages:
    driver: local
  ihub-sources:
    driver: local

  # Persistent data volumes
  ihub-data:
    driver: local
  ihub-uploads:
    driver: local
  ihub-logs:
    driver: local

networks:
  ihub-network:
    driver: bridge
    name: ihub-prod-network
  # ihub-init-network:
  #   driver: host
  #   name: ihub-prod-init-network
