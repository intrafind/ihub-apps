events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate max-age=0;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Upstream configuration
    upstream ihub_backend {
        server ihub-app:3000;
    }

    server {
        listen 80;
        server_name localhost;

        # Root path - you can serve other content here
        location / {
            return 200 'Welcome! iHub Apps is available at /ai-hub/';
            add_header Content-Type text/plain;
        }

        # iHub Apps at subpath /ihub
        location /ihub/ {
            # Remove the /ihub prefix before forwarding to backend
            rewrite ^/ihub(/.*)$ $1 break;

            proxy_pass http://ihub_backend/;
            proxy_http_version 1.1;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Critical: Set the base path header for auto-detection
            proxy_set_header X-Forwarded-Prefix /ihub;
            
            # WebSocket support (for potential future features)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Handle iHub Apps without trailing slash
        location = /ai-hub {
            return 301 /ai-hub/;
        }
    }

    # HTTPS server configuration (uncomment and configure for SSL)
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     # SSL settings
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Same location blocks as HTTP server
    #     location / {
    #         return 200 'Welcome! iHub Apps is available at /ihub/';
    #         add_header Content-Type text/plain;
    #     }
    #     
    #     location /ihub/ {
    #         rewrite ^/ihub(/.*)$ $1 break;
    #         
    #         proxy_pass http://ihub_backend/;
    #         proxy_http_version 1.1;
    #         
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_set_header X-Forwarded-Prefix /ihub;
    #         
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         
    #         proxy_connect_timeout 60s;
    #         proxy_send_timeout 60s;
    #         proxy_read_timeout 60s;
    #     }
    #     
    #     location = /ihub {
    #         return 301 /ihub/;
    #     }
    # }
}