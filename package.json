{
  "name": "ai-hub-apps",
  "version": "1.0.5",
  "description": "AI Hub Applications Platform",
  "type": "module",
  "bin": {
    "ai-hub-apps": "./server/sea-server.cjs"
  },
  "scripts": {
    "server": "cd server && node -r dotenv/config server.js dotenv_config_path=../.env",
    "client": "cd client && npm run dev",
    "dev": "concurrently \"npm run server\" \"npm run client\"",
    "install:all": "npm install && cd client && npm install && cd ../server && npm install",
    "build": "npm run build:clean && npm run build:client && npm run docs:build && npm run build:server && npm run build:config && npm run build:contents",
    "build:clean": "rimraf dist",
    "build:client": "cd client && npm run build && mkdir -p ../dist/public && cp -r dist/* ../dist/public/",
    "docs:build": "mdbook build docs",
    "build:contents": "mkdir -p dist/contents && cp -r contents/* dist/contents/",
    "build:server": "mkdir -p dist/server && cp -r server/*.js dist/server/ && cp server/*.cjs dist/server/ && cp server/package.json server/package-lock.json dist/server/ && cp -r server/adapters dist/server/",
    "build:config": "cp package.json package-lock.json dist/ && npm run build:dotenv",
    "build:dotenv": "[ -f .env ] && cp .env dist/ || echo 'No .env file found, skipping'",
    "build:package": "cd dist && npm ci --omit=dev && cd server && npm ci --omit=dev",
    "start": "cd server && node -r dotenv/config server.js dotenv_config_path=../.env",
    "start:prod": "cd dist && node server/start-prod.js",
    "prod:build": "npm run build && npm run build:package",
    "prod:deploy": "npm run prod:build && npm run start:prod",
    "build:binary": "npm run prod:build && ./build-sea.sh",
    "build:binary:macos": "npm run prod:build && ./build-sea.sh",
    "build:binary:linux": "npm run prod:build && ./build-sea.sh",
    "build:binary:windows": "npm run prod:build && ./build-sea.sh",
    "docker:build": "docker build -t ai-hub-apps:latest .",
    "docker:build:multiarch": "docker buildx build --platform linux/amd64,linux/arm64 -t ai-hub-apps:latest .",
    "docker:run": "docker run --rm -d --name ai-hub-apps -p 3000:3000 --env-file .env ai-hub-apps:latest",
    "docker:run:dev": "docker run --rm -it --name ai-hub-apps-dev -p 3000:3000 -v $(pwd)/docker/config:/app/config:ro --env-file .env ai-hub-apps:latest",
    "docker:stop": "docker stop ai-hub-apps && docker rm ai-hub-apps",
    "docker:logs": "docker logs -f ai-hub-apps",
    "docker:shell": "docker exec -it ai-hub-apps /bin/sh",
    "docker:compose:up": "docker-compose up -d",
    "docker:compose:down": "docker-compose down",
    "docker:compose:logs": "docker-compose logs -f",
    "docker:test:linux": "docker run --rm -it -p 3000:3000 -v \"$(pwd)/dist-bin:/app\" -w /app -e OPENAI_API_KEY=your_openai_api_key -e ANTHROPIC_API_KEY=your_anthropic_api_key -e GOOGLE_API_KEY=your_google_api_key --platform linux/amd64 node:20-slim /bin/bash -c \"chmod +x /app/ai-hub-apps-v1.0.5-linux && /app/ai-hub-apps-v1.0.5-linux\"",
    "electron:dev": "concurrently \"npm run dev\" \"electron electron/main.js\"",
    "electron:build": "npm run prod:build && electron-builder",
    "test:openai": "node server/tests/openaiAdapter.test.js",
    "test:mistral": "node server/tests/mistralAdapter.test.js",
    "test:anthropic": "node server/tests/anthropicAdapter.test.js",
    "test:google": "node server/tests/googleAdapter.test.js",
    "test:all": "npm run test:openai && npm run test:mistral && npm run test:anthropic && npm run test:google",
    "test:tool-calling": "cd server && node tests/toolCalling.test.js",
    "test:tool-integration": "cd server && node tests/toolCallingIntegration.test.js",
    "test:real-llm": "cd server && node tests/real-llm-integration.test.js",
    "test:azure-openai": "cd server && node tests/azure-openai-test.js",
    "test:tool-verification": "cd server && node tests/tool-call-verification.test.js",
    "test:api-documentation": "cd server && node tests/comprehensive-api-documentation.test.js",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --check .",
    "format:fix": "prettier --write ."
  },
  "keywords": [
    "ai",
    "llm",
    "chatbot",
    "applications"
  ],
  "dependencies": {
    "dotenv": "^17.2.0"
  },
  "devDependencies": {
    "concurrently": "^9.2.0",
    "electron": "^29.2.0",
    "electron-builder": "^24.6.0",
    "esbuild": "^0.25.6",
    "eslint": "^9.18.0",
    "globals": "^16.3.0",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.2",
    "nodemon": "^3.1.10",
    "postject": "^1.0.0-alpha.6",
    "prettier": "^3.4.2",
    "rimraf": "^6.0.1"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "lint-staged": {
    "*.{js,jsx}": [
      "eslint --fix",
      "prettier --write"
    ]
  },
  "build": {
    "asar": true,
    "files": [
      "dist/**/*",
      "electron/**/*"
    ],
    "mac": {
      "target": "dmg"
    },
    "linux": {
      "target": "AppImage"
    },
    "win": {
      "target": "nsis"
    }
  }
}
