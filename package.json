{
  "name": "ihub-apps",
  "version": "3.3.0",
  "description": "iHub Applications Platform",
  "type": "module",
  "bin": {
    "ihub-apps": "./server/sea-server.cjs"
  },
  "scripts": {
    "// === DEVELOPMENT ===": "",
    "setup:dev": "cp .env.example .env && npm run install:all && echo '\\nâœ… Setup complete! Edit .env with your API keys, then run: npm run dev'",
    "dev": "concurrently --kill-others-on-fail \"npm run server\" \"sleep 2 && npm run client\"",
    "server": "cd server && node -r dotenv/config server.js dotenv_config_path=../.env",
    "client": "cd client && npm run dev",
    "start": "cd server && node -r dotenv/config server.js dotenv_config_path=../.env",
    "// === INSTALLATION & CLEANUP ===": "",
    "install:all": "npm install && cd client && npm install && cd ../server && npm install",
    "clean": "npm run build:clean && rm -rf node_modules client/node_modules server/node_modules",
    "clean:install": "npm run clean && npm run install:all",
    "// === UTILITIES ===": "",
    "health": "curl -f http://localhost:3000/api/health || echo 'Server not running'",
    "logs": "tail -f server/server.log 2>/dev/null || echo 'No server log found'",
    "// === PRODUCTION BUILDS ===": "",
    "prod:build": "npm run build && npm run build:package",
    "prod:deploy": "npm run prod:build && npm run start:prod",
    "start:prod": "cd dist && node server/start-prod.js",
    "// === BUILD STEPS ===": "",
    "build": "npm run build:clean && npm run build:client && npm run docs:build && npm run docs:copy && npm run build:server && npm run build:config",
    "build:clean": "rimraf dist",
    "build:client": "cd client && npm run build && mkdir -p ../dist/public && cp -r dist/* ../dist/public/",
    "build:server": "mkdir -p dist/server && cp -r server/* dist/server/ && rm -rf dist/server/node_modules",
    "build:shared": "mkdir -p dist/shared && cp -r shared/* dist/shared/",
    "build:config": "cp package.json package-lock.json dist/ && npm run build:dotenv",
    "build:dotenv": "[ -f .env ] && cp .env dist/ || echo 'No .env file found, skipping'",
    "build:package": "cd dist && npm ci --omit=dev && cd server && npm ci --omit=dev",
    "build:docker": "npm run build:clean && npm run build:client && npm run docs:build && npm run docs:copy && npm run build:server && npm run build:shared && npm run build:config && npm run build:package",
    "build:binary": "npm run prod:build && ./build-sea.sh",
    "// === DOCUMENTATION ===": "",
    "docs:build": "npm run docs:update-version && cd docs && mdbook build",
    "docs:copy": "mkdir -p dist/docs && cp -r docs/book/* dist/docs/",
    "docs:update-version": "node scripts/update-docs-version.js",
    "version:sync": "node scripts/sync-release-version.js",
    "// === DOCKER ===": "",
    "docker:build": "docker build -f docker/Dockerfile -t ihub-apps:latest .",
    "docker:build:dev": "docker build -f docker/Dockerfile --target development -t ihub-apps:dev .",
    "docker:build:prod": "docker build -f docker/Dockerfile --target production -t ihub-apps:prod .",
    "docker:run": "docker run --rm -p 3000:3000 --env-file .env ihub-apps:latest",
    "docker:run:dev": "docker run --rm -p 3000:3000 -p 5173:5173 --env-file .env -v $(pwd):/app ihub-apps:dev",
    "docker:up": "docker-compose -f docker/docker-compose.yml up -d",
    "docker:up:build": "docker-compose -f docker/docker-compose.yml up -d --build",
    "docker:down": "docker-compose -f docker/docker-compose.yml down",
    "docker:down:volumes": "docker-compose -f docker/docker-compose.yml down -v",
    "docker:logs": "docker-compose -f docker/docker-compose.yml logs -f",
    "docker:logs:app": "docker-compose -f docker/docker-compose.yml logs -f ihub-dev",
    "docker:shell": "docker-compose -f docker/docker-compose.yml exec ihub-dev sh",
    "docker:prod:up": "docker-compose -f docker/docker-compose.prod.yml up -d",
    "docker:prod:down": "docker-compose -f docker/docker-compose.prod.yml down",
    "docker:prod:logs": "docker-compose -f docker/docker-compose.prod.yml logs -f",
    "docker:prod:shell": "docker-compose -f docker/docker-compose.prod.yml exec ihub-app sh",
    "docker:clean": "docker system prune -f && docker volume prune -f",
    "docker:clean:all": "docker system prune -af && docker volume prune -f",
    "// === ELECTRON ===": "",
    "electron:dev": "concurrently \"npm run dev\" \"electron electron/main.js\"",
    "electron:build": "npm run prod:build && electron-builder",
    "// === TESTING ===": "",
    "test:all": "npm run test:quick && npm run test:integration && npm run test:e2e",
    "test:quick": "npm run test:unit && npm run test:adapters",
    "test:unit": "jest --config tests/config/jest.config.js tests/unit",
    "test:integration": "jest --config tests/config/jest.config.js tests/integration",
    "test:e2e": "playwright test --config tests/config/playwright.config.js",
    "test:api": "jest --config tests/config/jest.config.js tests/integration/api",
    "test:models": "jest --config tests/config/jest.config.js tests/integration/models",
    "test:ui": "jest --config tests/config/jest.config.js tests/unit/client",
    "test:smoke": "npm run test:adapters && npm run health",
    "test:watch": "jest --config tests/config/jest.config.js --watch",
    "test:coverage": "jest --config tests/config/jest.config.js --coverage",
    "// === LEGACY TESTS ===": "",
    "test:legacy": "npm run test:openai && npm run test:mistral && npm run test:anthropic && npm run test:google",
    "test:adapters": "npm run test:openai && npm run test:mistral && npm run test:anthropic && npm run test:google",
    "test:openai": "node server/tests/openaiAdapter.test.js",
    "test:mistral": "node server/tests/mistralAdapter.test.js",
    "test:anthropic": "node server/tests/anthropicAdapter.test.js",
    "test:google": "node server/tests/googleAdapter.test.js",
    "test:tool-calling": "cd server && node tests/toolCalling.test.js",
    "test:tool-integration": "cd server && node tests/toolCallingIntegration.test.js",
    "test:real-llm": "cd server && node tests/real-llm-integration.test.js",
    "test:azure-openai": "cd server && node tests/azure-openai-test.js",
    "test:tool-verification": "cd server && node tests/tool-call-verification.test.js",
    "test:api-documentation": "cd server && node tests/comprehensive-api-documentation.test.js",
    "test:validate-framework": "./tests/validate-framework.sh",
    "// === CODE QUALITY ===": "",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --check .",
    "format:fix": "prettier --write .",
    "lint-format:fix": "npm run lint:fix && npm run format:fix",
    "// === WINDOWS SERVICE ===": "",
    "service:install": "node scripts/windows-service.js install",
    "service:uninstall": "node scripts/windows-service.js uninstall",
    "service:start": "node scripts/windows-service.js start",
    "service:stop": "node scripts/windows-service.js stop",
    "service:restart": "node scripts/windows-service.js restart",
    "service:status": "node scripts/windows-service.js status"
  },
  "keywords": [
    "ai",
    "llm",
    "chatbot",
    "applications"
  ],
  "dependencies": {
    "@monaco-editor/react": "^4.7.0",
    "dotenv": "^17.2.1",
    "file-saver": "^2.0.5",
    "html-to-image": "^1.11.13",
    "react-icons": "^5.5.0",
    "react-resizable-panels": "^3.0.4"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.28.0",
    "@babel/preset-react": "^7.27.1",
    "@playwright/test": "^1.48.2",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^14.5.2",
    "concurrently": "^9.2.0",
    "electron": "^37.2.6",
    "electron-builder": "^26.0.12",
    "esbuild": "^0.25.8",
    "eslint": "^9.32.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "globals": "^16.3.0",
    "husky": "^9.1.7",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "lint-staged": "^16.1.2",
    "nodemon": "^3.1.10",
    "postject": "^1.0.0-alpha.6",
    "prettier": "^3.4.2",
    "rimraf": "^6.0.1",
    "supertest": "^7.1.3",
    "vitest": "^2.1.8"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "lint-staged": {
    "*.{js,jsx}": [
      "eslint --fix",
      "prettier --write"
    ]
  },
  "build": {
    "asar": true,
    "files": [
      "dist/**/*",
      "electron/**/*"
    ],
    "mac": {
      "target": "dmg"
    },
    "linux": {
      "target": "AppImage"
    },
    "win": {
      "target": "nsis"
    }
  }
}
