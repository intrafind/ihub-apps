[
  {
    "id": "braveSearch",
    "name": "Brave Web / Internet Search",
    "description": "Search the web / internet using Brave for up-to-date information. Use the 'query' parameter with your search terms.",
    "script": "braveSearch.js",
    "concurrency": 5,
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query or search terms to find on the web. Example: 'latest AI news' or 'Python programming tutorial'"
        }
      },
      "required": ["query"]
    }
  },
  {
    "id": "tavilySearch",
    "name": "Tavily Web Search",
    "description": "Search the web using the Tavily API. Use the 'query' parameter with your search terms.",
    "script": "tavilySearch.js",
    "concurrency": 5,
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query or search terms to find on the web. Example: 'latest AI news' or 'Python programming tutorial'"
        },
        "search_depth": {
          "type": "string",
          "enum": ["basic", "advanced"],
          "default": "basic",
          "description": "Depth of the search"
        },
        "max_results": {
          "type": "integer",
          "description": "Maximum number of search results to return",
          "default": 5,
          "minimum": 1,
          "maximum": 10
        }
      },
      "required": ["query"]
    }
  },
  {
    "id": "webContentExtractor",
    "name": "Web Content Extractor",
    "description": "Extract clean, readable content from an URL. This can be content like PDFs or webpages, removing ads, headers, footers, and other non-content elements. Use the 'url' parameter with a valid HTTP/HTTPS URL.",
    "script": "webContentExtractor.js",
    "concurrency": 3,
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The full URL of the webpage to extract content from. Must be a valid HTTP or HTTPS URL. Example: 'https://example.com/article'"
        },
        "maxLength": {
          "type": "integer",
          "description": "Maximum length of extracted content in characters (default: 5000)",
          "default": 5000,
          "minimum": 100,
          "maximum": 50000
        },
        "ignoreSSL": {
          "type": "boolean",
          "description": "Ignore invalid HTTPS certificates (default: false, admin configurable)",
          "default": false
        }
      },
      "required": ["url"]
    }
  },
  {
    "id": "enhancedWebSearch",
    "name": "Enhanced Web Search with Content",
    "description": "Performs web search and automatically extracts full content from the top results for comprehensive information gathering. Perfect for 'chat with web' functionality. Use the 'query' parameter with your search terms.",
    "script": "enhancedWebSearch.js",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query or search terms to find on the web. Example: 'artificial intelligence trends 2024' or 'best programming languages'"
        },
        "extractContent": {
          "type": "boolean",
          "description": "Whether to extract full content from search results (default: true)",
          "default": true
        },
        "maxResults": {
          "type": "integer",
          "description": "Maximum number of search results to process and extract content from (default: 3)",
          "default": 3,
          "minimum": 1,
          "maximum": 10
        },
        "contentMaxLength": {
          "type": "integer",
          "description": "Maximum length of extracted content per page in characters (default: 3000)",
          "default": 3000,
          "minimum": 500,
          "maximum": 10000
        }
      },
      "required": ["query"]
    }
  },
  {
    "id": "deepResearch",
    "name": "Deep Research",
    "description": "Perform iterative web research with progress updates via SSE events.",
    "script": "deepResearch.js",
    "parameters": {
      "type": "object",
      "properties": {
        "query": { "type": "string", "description": "Initial search query" },
        "maxRounds": {
          "type": "integer",
          "description": "Number of search iterations",
          "default": 5,
          "minimum": 5,
          "maximum": 10
        },
        "maxResults": {
          "type": "integer",
          "description": "Number of results to process per round",
          "default": 5,
          "minimum": 1,
          "maximum": 10
        },
        "contentMaxLength": {
          "type": "integer",
          "description": "Maximum length of extracted content per page",
          "default": 5000,
          "minimum": 500,
          "maximum": 10000
        },
        "chatId": { "type": "string", "description": "Chat session ID" }
      },
      "required": ["query"]
    }
  },
  {
    "id": "researchPlanner",
    "name": "Research Planner",
    "description": "Break down a research topic into distinct investigative tasks",
    "script": "researchPlanner.js",
    "parameters": {
      "type": "object",
      "properties": {
        "question": { "type": "string", "description": "Research topic" },
        "teamSize": {
          "type": "integer",
          "description": "Number of tasks to generate",
          "default": 3,
          "minimum": 1,
          "maximum": 10
        },
        "soundBites": { "type": "string", "description": "Additional context" }
      },
      "required": ["question"]
    }
  },
  {
    "id": "evaluator",
    "name": "Answer Evaluator",
    "description": "Evaluate answers for definitiveness, freshness and completeness.",
    "script": "evaluator.js",
    "parameters": {
      "type": "object",
      "properties": {
        "question": { "type": "string", "description": "Original user question" },
        "answer": { "type": "string", "description": "Draft answer to evaluate" },
        "model": {
          "type": "string",
          "description": "Model ID for evaluation",
          "default": "gemini-1.5-flash"
        }
      },
      "required": ["question", "answer"]
    }
  },
  {
    "id": "queryRewriter",
    "name": "Query Rewriter",
    "description": "Rewrite user search queries into optimized variations.",
    "script": "queryRewriter.js",
    "parameters": {
      "type": "object",
      "properties": {
        "query": { "type": "string", "description": "Search query to rewrite" },
        "think": { "type": "string", "description": "User motivation" },
        "context": { "type": "string", "description": "Optional context" },
        "model": {
          "type": "string",
          "description": "Model id",
          "default": "gemini-2.5-flash-preview-05-20"
        }
      },
      "required": ["query"]
    }
  },
  {
    "id": "playwrightScreenshot",
    "name": "Website Screenshot (Playwright)",
    "description": "Capture a screenshot or PDF of a webpage using Playwright.",
    "script": "playwrightScreenshot.js",
    "parameters": {
      "type": "object",
      "properties": {
        "url": { "type": "string", "description": "Target URL" },
        "format": { "type": "string", "enum": ["png", "pdf"], "default": "png" },
        "fullPage": { "type": "boolean", "default": true }
      },
      "required": ["url"]
    }
  },
  {
    "id": "answerReducer",
    "name": "Answer Reducer",
    "description": "Merge multiple text passages into a single concise article.",
    "script": "answerReducer.js",
    "parameters": {
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Texts to merge"
        }
      },
      "required": ["answers"]
    }
  },
  {
    "id": "seleniumScreenshot",
    "name": "Website Screenshot (Selenium)",
    "description": "Capture a screenshot or PDF of a webpage using Selenium.",
    "script": "seleniumScreenshot.js",
    "parameters": {
      "type": "object",
      "properties": {
        "url": { "type": "string", "description": "Target URL" },
        "format": { "type": "string", "enum": ["png", "pdf"], "default": "png" },
        "fullPage": { "type": "boolean", "default": true }
      },
      "required": ["url"]
    }
  },
  {
    "id": "entraPeopleSearch",
    "name": "Entra People Search",
    "description": "Query the corporate directory for people and teams",
    "script": "entraPeopleSearch.js",
    "functions": {
      "findUser": {
        "description": "Find a user by name or email",
        "parameters": {
          "type": "object",
          "properties": {
            "name": { "type": "string", "description": "User name or email" }
          },
          "required": ["name"]
        }
      },
      "getAllUserDetails": {
        "description": "Get all details for a user",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": { "type": "string", "description": "User identifier" }
          },
          "required": ["userId"]
        }
      },
      "getUserManager": {
        "description": "Get the direct manager of a user",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": { "type": "string", "description": "User identifier" }
          },
          "required": ["userId"]
        }
      },
      "getUserGroups": {
        "description": "List teams the user belongs to",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": { "type": "string", "description": "User identifier" }
          },
          "required": ["userId"]
        }
      },
      "getTeamMembers": {
        "description": "Get members of a team",
        "parameters": {
          "type": "object",
          "properties": {
            "teamId": { "type": "string", "description": "Team identifier" }
          },
          "required": ["teamId"]
        }
      },
      "getUserPhotoBase64": {
        "description": "Get a user's profile photo as Base64",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": { "type": "string", "description": "User identifier" }
          },
          "required": ["userId"]
        }
      }
    }
  },
  {
    "id": "iFinderSearch",
    "name": "iFinder Document Search",
    "description": "Search for documents in the iFinder system using authenticated user context. Use the 'query' parameter with your search terms.",
    "script": "iFinderSearch.js",
    "concurrency": 3,
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Search query to find documents in iFinder. Example: 'contract proposals' or 'technical documentation'"
        },
        "maxResults": {
          "type": "integer",
          "description": "Maximum number of search results to return (default: 10, max: 50)",
          "default": 10,
          "minimum": 1,
          "maximum": 50
        },
        "language": {
          "type": "string",
          "description": "Filter documents by language (optional)",
          "enum": ["en", "de", "fr", "es", "it"]
        },
        "documentType": {
          "type": "string",
          "description": "Filter by document type (optional)",
          "enum": ["pdf", "doc", "docx", "txt", "html", "xml"]
        }
      },
      "required": ["query"]
    }
  },
  {
    "id": "iFinderMetadata",
    "name": "iFinder Document Metadata",
    "description": "Fetch detailed metadata for a specific document from iFinder using document ID.",
    "script": "iFinderMetadata.js",
    "concurrency": 5,
    "parameters": {
      "type": "object",
      "properties": {
        "documentId": {
          "type": "string",
          "description": "Document ID to fetch metadata for. Example: 'doc123456'"
        },
        "includePermissions": {
          "type": "boolean",
          "description": "Include document permissions in metadata (default: false)",
          "default": false
        },
        "includeVersions": {
          "type": "boolean",
          "description": "Include version history in metadata (default: false)",
          "default": false
        }
      },
      "required": ["documentId"]
    }
  },
  {
    "id": "iFinderContent",
    "name": "iFinder Document Content",
    "description": "Fetch document content from iFinder for LLM processing. Perfect for summarization, translation, and analysis tasks.",
    "script": "iFinderContent.js",
    "concurrency": 2,
    "parameters": {
      "type": "object",
      "properties": {
        "documentId": {
          "type": "string",
          "description": "Document ID to fetch content for. Example: 'doc123456'"
        },
        "format": {
          "type": "string",
          "description": "Content format to retrieve (default: text)",
          "enum": ["text", "html", "markdown", "raw"],
          "default": "text"
        },
        "maxLength": {
          "type": "integer",
          "description": "Maximum content length in characters (default: 50000)",
          "default": 50000,
          "minimum": 1000,
          "maximum": 100000
        },
        "includeMetadata": {
          "type": "boolean",
          "description": "Include document metadata with content (default: true)",
          "default": true
        },
        "pageRange": {
          "type": "string",
          "description": "Specific page range for multi-page documents (e.g., '1-5')"
        }
      },
      "required": ["documentId"]
    }
  },
  {
    "id": "iFinderDownload",
    "name": "iFinder Document Download",
    "description": "Download documents from iFinder or provide secure download URLs for client access.",
    "script": "iFinderDownload.js",
    "concurrency": 1,
    "parameters": {
      "type": "object",
      "properties": {
        "documentId": {
          "type": "string",
          "description": "Document ID to download. Example: 'doc123456'"
        },
        "action": {
          "type": "string",
          "description": "Download action: 'url' for download URL, 'download' for server-side download",
          "enum": ["url", "download"],
          "default": "url"
        },
        "filename": {
          "type": "string",
          "description": "Custom filename for download (optional)"
        },
        "includeMetadata": {
          "type": "boolean",
          "description": "Include metadata file with download (default: false)",
          "default": false
        }
      },
      "required": ["documentId"]
    }
  }
]
