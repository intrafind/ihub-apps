# Docker CI/CD Pipeline for AI Hub Apps
# Builds and publishes Docker images to GitHub Container Registry

name: Docker CI/CD

on:
  # Build on releases and prereleases
  release:
    types: [published, prereleased]
  
  # Manual trigger with comment "@build docker images"
  issue_comment:
    types: [created]
  
  # Manual workflow dispatch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Check if workflow should run
  check-trigger:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Check trigger conditions
        id: check
        run: |
          should_run=false
          
          # Always run on releases
          if [[ "${{ github.event_name }}" == "release" ]]; then
            should_run=true
          fi
          
          # Always run on manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            should_run=true
          fi
          
          # Check for comment trigger with proper escaping
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            # Use environment variable to safely handle multi-line comments
            echo "${{ github.event.comment.body }}" > comment_body.txt
            if grep -q "@build docker images" comment_body.txt; then
              should_run=true
            fi
            rm -f comment_body.txt
          fi
          
          echo "should-run=$should_run" >> $GITHUB_OUTPUT
          echo "Workflow should run: $should_run"
          echo "Event: ${{ github.event_name }}"
          
          # Exit early if workflow shouldn't run to prevent downstream job scheduling
          if [[ "$should_run" == "false" ]]; then
            echo "Workflow conditions not met. Skipping Docker build."
          fi

  # Build and test the Docker image
  build-and-test:
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-run == 'true'
    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=AI Hub Apps
            org.opencontainers.image.description=AI Hub Applications Platform
            org.opencontainers.image.vendor=IntraFind Software AG
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Test container startup
        run: |
          echo "Testing container startup..."
          # Use first tag from metadata instead of github.sha
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          docker run --rm -d --name ai-hub-test \
            -e JWT_SECRET=test-secret \
            -e NODE_ENV=production \
            -p 3000:3000 \
            "$IMAGE_TAG"
          
          # Wait for container to start with better error handling
          if ! timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'; then
            echo "Container startup failed"
            docker logs ai-hub-test
            docker stop ai-hub-test || true
            exit 1
          fi
          
          docker stop ai-hub-test
          echo "Container startup test passed!"

  # Security scanning with Trivy
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-test.outputs.image-digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true  # Add this line
        with:
          sarif_file: 'trivy-results.sarif'          

      - name: Upload Trivy results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.sarif
          retention-days: 30

      - name: Check for critical vulnerabilities
        run: |
          # Extract critical and high severity issues
          CRITICAL=$(cat trivy-results.sarif | jq -r '[.runs[].results[] | select(.level == "error")] | length')
          HIGH=$(cat trivy-results.sarif | jq -r '[.runs[].results[] | select(.level == "warning")] | length')
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          
          # Fail if critical vulnerabilities found
          if [ "$CRITICAL" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found! Build failed."
            exit 1
          fi
          
          # Warn about high vulnerabilities but don't fail
          if [ "$HIGH" -gt 0 ]; then
            echo "⚠️ High severity vulnerabilities found. Consider updating dependencies."
          else
            echo "✅ No critical or high severity vulnerabilities found."
          fi