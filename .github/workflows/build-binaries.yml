name: Build and Release Binaries

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to attach binaries to (e.g., v1.0.0)'
        required: true
        default: ''
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Quick build check job - runs on every push and pull request
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    # Only run on push or pull_request events
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci && cd ..
          cd server && npm ci && cd ..

      - name: Install client dependencies with uuid package
        run: |
          cd client
          npm install
          npm install uuid
          cd ..

      - name: Build client
        run: |
          cd client
          npm run build
          cd ..

      - name: Verify build
        run: |
          # Create production build
          npm run prod:build
          
          # Verify the build was successful
          if [ -d "dist" ] && [ -d "dist/public" ] && [ -d "dist/server" ] && [ -d "dist/contents" ]; then
            echo "✅ Build successful!"
          else
            echo "❌ Build failed! Missing expected output directories."
            exit 1
          fi
        shell: bash

  # Full build job - runs for releases and manual dispatch
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # Only run on release or workflow_dispatch events
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            binary_base_name: ai-hub-apps-linux
            pkg_target: node18-linux-x64
          - os: macos-latest
            platform: macos
            binary_base_name: ai-hub-apps-macos
            pkg_target: node18-macos-x64
          - os: windows-latest
            platform: win
            binary_base_name: ai-hub-apps-win.exe
            pkg_target: node18-win-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci && npm install uuid && cd ..
          cd server && npm ci && cd ..

      - name: Build client
        run: |
          cd client
          npm run build
          cd ..

      - name: Prepare build directories
        run: |
          # Create necessary directories
          mkdir -p dist/public dist/server dist/contents dist/examples
          # Copy public files from client build
          cp -r client/dist/* dist/public/
          # Copy server files
          cp -r server/*.js dist/server/
          cp server/*.cjs dist/server/
          cp -r server/adapters dist/server/
          cp server/package.json dist/server/
          cp package.json dist/
          # Copy contents folder (with all subfolders)
          cp -r contents/* dist/contents/
          # Copy examples folder
          cp -r examples/* dist/examples/
        shell: bash

      - name: Install production dependencies
        run: |
          cd dist
          npm install --production
          cd server
          npm install --production
          cd ../..
        shell: bash

      - name: Set version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=${{ github.event.inputs.release_tag }}" >> $GITHUB_ENV
          fi
        shell: bash
        
      - name: Build binary
        run: |
          mkdir -p dist-bin
          # Create versioned binary name for the file
          VERSIONED_NAME="${{ matrix.binary_base_name }}"
          # For Windows files, ensure the version is before the file extension
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            # Split the name and extension for Windows
            VERSIONED_NAME="ai-hub-apps-win-${{ env.VERSION }}.exe"
          else
            # For non-Windows platforms, add version normally
            VERSIONED_NAME="${{ matrix.binary_base_name }}-${{ env.VERSION }}"
          fi
          echo "VERSIONED_NAME=$VERSIONED_NAME" >> $GITHUB_ENV
          npx pkg . --target ${{ matrix.pkg_target }} --output dist-bin/$VERSIONED_NAME --options max_old_space_size=4096
        shell: bash

      - name: Copy assets for binary
        run: |
          # Create necessary directories for binary assets
          mkdir -p dist-bin/public dist-bin/contents dist-bin/examples
          # Copy public files
          cp -r dist/public/* dist-bin/public/
          # Copy contents with subdirectories
          cp -r dist/contents/* dist-bin/contents/
          # Copy examples folder
          cp -r dist/examples/* dist-bin/examples/
          # Copy configuration template
          cp config.env dist-bin/
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VERSIONED_NAME }}
          path: dist-bin/${{ env.VERSIONED_NAME }}

      - name: Create platform-specific archive
        run: |
          cd dist-bin
          # Create versioned archive name
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            VERSIONED_ARCHIVE_NAME="ai-hub-apps-win-${{ env.VERSION }}"
            7z a -tzip ../$VERSIONED_ARCHIVE_NAME.zip .
          else
            VERSIONED_ARCHIVE_NAME="${{ matrix.binary_base_name }}-${{ env.VERSION }}"
            tar -czf ../$VERSIONED_ARCHIVE_NAME.tar.gz .
          fi
          echo "VERSIONED_ARCHIVE_NAME=$VERSIONED_ARCHIVE_NAME" >> $GITHUB_ENV
          cd ..
        shell: bash

      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VERSIONED_ARCHIVE_NAME }}
          path: |
            ${{ env.VERSIONED_ARCHIVE_NAME }}.tar.gz
            ${{ env.VERSIONED_ARCHIVE_NAME }}.zip

  release:
    name: Attach to Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version for release job
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=${{ github.event.inputs.release_tag }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Setup GitHub CLI
        uses: cli/cli@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts
        shell: bash

      - name: Upload assets to release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release'
        with:
          files: |
            ./artifacts/**/*
          tag_name: ${{ env.VERSION }}

      # Manual workflow dispatch asset uploads
      - name: Upload assets for manual workflow
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Check if the release exists
          if ! gh release view ${{ github.event.inputs.release_tag }} &>/dev/null; then
            echo "Release ${{ github.event.inputs.release_tag }} not found. Creating it..."
            gh release create ${{ github.event.inputs.release_tag }} --title "Release ${{ github.event.inputs.release_tag }}" --notes "Automated release created by GitHub Actions"
          fi
          
          # Find all files in artifacts directory and upload them
          find ./artifacts -type f -not -path "*/\.*" | while read -r file; do
            echo "Uploading $file to release ${{ github.event.inputs.release_tag }}..."
            gh release upload ${{ github.event.inputs.release_tag }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}