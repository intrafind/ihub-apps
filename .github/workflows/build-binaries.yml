name: Build and Release Binaries

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to attach binaries to (e.g., v1.0.0)'
        required: true
        default: ''
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Quick build check job - runs on every push and pull request
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    # Only run on push or pull_request events
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: 'latest'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci && cd ..
          cd server && npm ci && cd ..

      - name: Install client dependencies with uuid package
        run: |
          cd client
          npm install
          npm install uuid
          cd ..

      - name: Build client
        run: |
          cd client
          npm run build
          cd ..

      - name: Verify build
        run: |
          # Create production build
          npm run prod:build

          # Verify the build was successful
          if [ -d "dist" ] && [ -d "dist/public" ] && [ -d "dist/server" ]; then
            echo "✅ Build successful!"
          else
            echo "❌ Build failed! Missing expected output directories."
            exit 1
          fi
        shell: bash

  # Full build job - runs for releases and manual dispatch
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # Only run on release or workflow_dispatch events
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            binary_extension: ''
          - os: macos-latest
            platform: macos
            binary_extension: ''
          - os: windows-latest
            platform: win
            binary_extension: '.exe'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: 'latest'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci && npm install uuid && cd ..
          cd server && npm ci && cd ..

      - name: Set version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=${{ github.event.inputs.release_tag }}" >> $GITHUB_ENV
          fi
          # Set versioned name for binary
          echo "VERSIONED_NAME=ai-hub-apps-${{ env.VERSION }}-${{ matrix.platform }}${{ matrix.binary_extension }}" >> $GITHUB_ENV
        shell: bash

      - name: Update package.json version if needed
        run: |
          # If VERSION is set and doesn't match package.json, update it
          if [ -n "${{ env.VERSION }}" ]; then
            PKG_VERSION=$(node -p "require('./package.json').version")
            VERSION_NO_V="${VERSION#v}"
            if [ "$PKG_VERSION" != "$VERSION_NO_V" ]; then
              echo "Updating package.json version from $PKG_VERSION to $VERSION_NO_V"
              npm version $VERSION_NO_V --no-git-tag-version
            fi
          fi
        shell: bash

      - name: Build using Node.js SEA
        run: |
          # Use Node.js SEA (Single Executable Application) feature with platform-specific argument
          chmod +x ./build-sea.sh
          ./build-sea.sh ${{ matrix.platform }}
        shell: bash

      - name: Windows-specific setup
        if: matrix.platform == 'win'
        run: |
          # Check Windows binary architecture
          node -e "console.log('Windows build: Node.js architecture is ' + process.arch)"

          # Create a simple diagnostic script for Windows
          echo '@echo off
          echo Windows Diagnostic Information:
          echo -----------------------------
          echo Node Version: %NODE_VERSION%
          echo Architecture: %PROCESSOR_ARCHITECTURE%
          echo Processor: %PROCESSOR_IDENTIFIER%
          echo System Type: %PROCESSOR_ARCHITECTURE%
          echo Number of Processors: %NUMBER_OF_PROCESSORS%
          pause
          ' > dist-bin/windows-check.bat

          chmod +x dist-bin/windows-check.bat
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.platform }}-${{ env.VERSION }}
          path: |
            dist-bin/ai-hub-apps-v*-${{ matrix.platform }}${{ matrix.binary_extension }}
            dist-bin/ai-hub-apps-v*-win.bat
            dist-bin/ai-hub-apps-v*-${{ matrix.platform }}

      - name: Create platform-specific archive
        run: |
          cd dist-bin
          # Create versioned archive name
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            VERSIONED_ARCHIVE_NAME="ai-hub-apps-${{ env.VERSION }}-win"
            7z a -tzip ../$VERSIONED_ARCHIVE_NAME.zip .
          else
            VERSIONED_ARCHIVE_NAME="ai-hub-apps-${{ env.VERSION }}-${{ matrix.platform }}"
            tar -czf ../$VERSIONED_ARCHIVE_NAME.tar.gz .
          fi
          echo "VERSIONED_ARCHIVE_NAME=$VERSIONED_ARCHIVE_NAME" >> $GITHUB_ENV
          cd ..
        shell: bash

      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: archive-${{ matrix.platform }}-${{ env.VERSION }}
          path: |
            ${{ env.VERSIONED_ARCHIVE_NAME }}.tar.gz
            ${{ env.VERSIONED_ARCHIVE_NAME }}.zip

  release:
    name: Attach to Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version for release job
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=${{ github.event.inputs.release_tag }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Setup GitHub CLI
        run: |
          echo "Using GitHub CLI that's pre-installed on the runner..."
          # Verify gh is installed and authenticated through GITHUB_TOKEN
          gh --version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts
        shell: bash

      - name: Upload assets to release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        with:
          files: ./artifacts/**/*.*
          tag_name: ${{ env.VERSION }}
